// <auto-generated/>

#nullable enable annotations
#nullable disable warnings

// Suppress warnings about [Obsolete] member usage in generated code.
#pragma warning disable CS0612, CS0618

namespace core.audiamus.connect.ui
{
    public partial class WindowsFormsJsonContext : global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver
    {
        /// <inheritdoc/>
        public override global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? GetTypeInfo(global::System.Type type)
        {
            Options.TryGetTypeInfo(type, out global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? typeInfo);
            return typeInfo;
        }

        global::System.Text.Json.Serialization.Metadata.JsonTypeInfo? global::System.Text.Json.Serialization.Metadata.IJsonTypeInfoResolver.GetTypeInfo(global::System.Type type, global::System.Text.Json.JsonSerializerOptions options)
        {
            if (type == typeof(bool))
            {
                return Create_Boolean(options);
            }
            if (type == typeof(bool?))
            {
                return Create_NullableBoolean(options);
            }
            if (type == typeof(byte))
            {
                return Create_Byte(options);
            }
            if (type == typeof(byte[]))
            {
                return Create_ByteArray(options);
            }
            if (type == typeof(float))
            {
                return Create_Single(options);
            }
            if (type == typeof(float?))
            {
                return Create_NullableSingle(options);
            }
            if (type == typeof(global::core.audiamus.aux.propgrid.CategoryCommands))
            {
                return Create_CategoryCommands(options);
            }
            if (type == typeof(global::core.audiamus.aux.propgrid.PropertyCommands))
            {
                return Create_PropertyCommands(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Author))
            {
                return Create_Author(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Book))
            {
                return Create_Book(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Chapter))
            {
                return Create_Chapter(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.ChapterInfo))
            {
                return Create_ChapterInfo(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Codec))
            {
                return Create_Codec(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Component))
            {
                return Create_Component(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Conversion))
            {
                return Create_Conversion(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.ECodec))
            {
                return Create_ECodec(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.ECodec?))
            {
                return Create_NullableECodec(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EConversionState))
            {
                return Create_EConversionState(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EConversionState?))
            {
                return Create_NullableEConversionState(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EDeliveryType))
            {
                return Create_EDeliveryType(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EDeliveryType?))
            {
                return Create_NullableEDeliveryType(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EDownloadQuality))
            {
                return Create_EDownloadQuality(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.EDownloadQuality?))
            {
                return Create_NullableEDownloadQuality(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Genre))
            {
                return Create_Genre(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.IBookCommon))
            {
                return Create_IBookCommon(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Ladder))
            {
                return Create_Ladder(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Narrator))
            {
                return Create_Narrator(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Rung))
            {
                return Create_Rung(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.Series))
            {
                return Create_Series(options);
            }
            if (type == typeof(global::core.audiamus.booksdb.SeriesBook))
            {
                return Create_SeriesBook(options);
            }
            if (type == typeof(global::core.audiamus.common.ERegion))
            {
                return Create_ERegion(options);
            }
            if (type == typeof(global::core.audiamus.common.IBookMeta))
            {
                return Create_IBookMeta(options);
            }
            if (type == typeof(global::core.audiamus.connect.EInitialSorting))
            {
                return Create_EInitialSorting(options);
            }
            if (type == typeof(global::core.audiamus.connect.IAudibleApi))
            {
                return Create_IAudibleApi(options);
            }
            if (type == typeof(global::core.audiamus.connect.IDownloadSettings))
            {
                return Create_IDownloadSettings(options);
            }
            if (type == typeof(global::core.audiamus.connect.IExportSettings))
            {
                return Create_IExportSettings(options);
            }
            if (type == typeof(global::core.audiamus.connect.IProfileKeyEx))
            {
                return Create_IProfileKeyEx(options);
            }
            if (type == typeof(global::core.audiamus.connect.ui.BookDataSource))
            {
                return Create_BookDataSource(options);
            }
            if (type == typeof(global::System.Action))
            {
                return Create_Action(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Author>))
            {
                return Create_ICollectionAuthor(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Book>))
            {
                return Create_ICollectionBook(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Chapter>))
            {
                return Create_ICollectionChapter(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Codec>))
            {
                return Create_ICollectionCodec(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Component>))
            {
                return Create_ICollectionComponent(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Genre>))
            {
                return Create_ICollectionGenre(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Ladder>))
            {
                return Create_ICollectionLadder(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Narrator>))
            {
                return Create_ICollectionNarrator(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.Rung>))
            {
                return Create_ICollectionRung(options);
            }
            if (type == typeof(global::System.Collections.Generic.ICollection<global::core.audiamus.booksdb.SeriesBook>))
            {
                return Create_ICollectionSeriesBook(options);
            }
            if (type == typeof(global::System.DateTime))
            {
                return Create_DateTime(options);
            }
            if (type == typeof(global::System.DateTime?))
            {
                return Create_NullableDateTime(options);
            }
            if (type == typeof(global::System.Drawing.Color))
            {
                return Create_Color(options);
            }
            if (type == typeof(global::System.Drawing.Color[]))
            {
                return Create_ColorArray(options);
            }
            if (type == typeof(global::System.Drawing.Image))
            {
                return Create_Image(options);
            }
            if (type == typeof(global::System.Drawing.Imaging.ColorPalette))
            {
                return Create_ColorPalette(options);
            }
            if (type == typeof(global::System.Drawing.Imaging.ImageFormat))
            {
                return Create_ImageFormat(options);
            }
            if (type == typeof(global::System.Drawing.Imaging.PixelFormat))
            {
                return Create_PixelFormat(options);
            }
            if (type == typeof(global::System.Drawing.Imaging.PropertyItem))
            {
                return Create_PropertyItem(options);
            }
            if (type == typeof(global::System.Drawing.Imaging.PropertyItem[]))
            {
                return Create_PropertyItemArray(options);
            }
            if (type == typeof(global::System.Drawing.Size))
            {
                return Create_Size(options);
            }
            if (type == typeof(global::System.Drawing.SizeF))
            {
                return Create_SizeF(options);
            }
            if (type == typeof(global::System.Func<global::core.audiamus.connect.AccountAliasContext, bool>))
            {
                return Create_FuncAccountAliasContextBoolean(options);
            }
            if (type == typeof(global::System.Func<global::System.Threading.Tasks.Task>))
            {
                return Create_FuncTask(options);
            }
            if (type == typeof(global::System.Guid))
            {
                return Create_Guid(options);
            }
            if (type == typeof(global::System.Guid[]))
            {
                return Create_GuidArray(options);
            }
            if (type == typeof(global::System.TimeSpan))
            {
                return Create_TimeSpan(options);
            }
            if (type == typeof(global::System.TimeSpan?))
            {
                return Create_NullableTimeSpan(options);
            }
            if (type == typeof(int))
            {
                return Create_Int32(options);
            }
            if (type == typeof(int?))
            {
                return Create_NullableInt32(options);
            }
            if (type == typeof(int[]))
            {
                return Create_Int32Array(options);
            }
            if (type == typeof(long))
            {
                return Create_Int64(options);
            }
            if (type == typeof(long?))
            {
                return Create_NullableInt64(options);
            }
            if (type == typeof(object))
            {
                return Create_Object(options);
            }
            if (type == typeof(short))
            {
                return Create_Int16(options);
            }
            if (type == typeof(string))
            {
                return Create_String(options);
            }
            if (type == typeof(uint))
            {
                return Create_UInt32(options);
            }
            return null;
        }
    }
}
